// Code generated by mockery v2.53.3. DO NOT EDIT.

package translation

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockAIClient is an autogenerated mock type for the AIClient type
type MockAIClient struct {
	mock.Mock
}

type MockAIClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAIClient) EXPECT() *MockAIClient_Expecter {
	return &MockAIClient_Expecter{mock: &_m.Mock}
}

// Translate provides a mock function with given fields: ctx, data
func (_m *MockAIClient) Translate(ctx context.Context, data TranslatePayloadItem) (TranslatePayloadItem, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Translate")
	}

	var r0 TranslatePayloadItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, TranslatePayloadItem) (TranslatePayloadItem, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, TranslatePayloadItem) TranslatePayloadItem); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(TranslatePayloadItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, TranslatePayloadItem) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAIClient_Translate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Translate'
type MockAIClient_Translate_Call struct {
	*mock.Call
}

// Translate is a helper method to define mock.On call
//   - ctx context.Context
//   - data TranslatePayloadItem
func (_e *MockAIClient_Expecter) Translate(ctx interface{}, data interface{}) *MockAIClient_Translate_Call {
	return &MockAIClient_Translate_Call{Call: _e.mock.On("Translate", ctx, data)}
}

func (_c *MockAIClient_Translate_Call) Run(run func(ctx context.Context, data TranslatePayloadItem)) *MockAIClient_Translate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(TranslatePayloadItem))
	})
	return _c
}

func (_c *MockAIClient_Translate_Call) Return(_a0 TranslatePayloadItem, _a1 error) *MockAIClient_Translate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAIClient_Translate_Call) RunAndReturn(run func(context.Context, TranslatePayloadItem) (TranslatePayloadItem, error)) *MockAIClient_Translate_Call {
	_c.Call.Return(run)
	return _c
}

// TranslateBatch provides a mock function with given fields: ctx, data
func (_m *MockAIClient) TranslateBatch(ctx context.Context, data []TranslatePayloadItem) ([]TranslatePayloadItem, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for TranslateBatch")
	}

	var r0 []TranslatePayloadItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []TranslatePayloadItem) ([]TranslatePayloadItem, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []TranslatePayloadItem) []TranslatePayloadItem); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]TranslatePayloadItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []TranslatePayloadItem) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAIClient_TranslateBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TranslateBatch'
type MockAIClient_TranslateBatch_Call struct {
	*mock.Call
}

// TranslateBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - data []TranslatePayloadItem
func (_e *MockAIClient_Expecter) TranslateBatch(ctx interface{}, data interface{}) *MockAIClient_TranslateBatch_Call {
	return &MockAIClient_TranslateBatch_Call{Call: _e.mock.On("TranslateBatch", ctx, data)}
}

func (_c *MockAIClient_TranslateBatch_Call) Run(run func(ctx context.Context, data []TranslatePayloadItem)) *MockAIClient_TranslateBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]TranslatePayloadItem))
	})
	return _c
}

func (_c *MockAIClient_TranslateBatch_Call) Return(_a0 []TranslatePayloadItem, _a1 error) *MockAIClient_TranslateBatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAIClient_TranslateBatch_Call) RunAndReturn(run func(context.Context, []TranslatePayloadItem) ([]TranslatePayloadItem, error)) *MockAIClient_TranslateBatch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAIClient creates a new instance of MockAIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAIClient {
	mock := &MockAIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
