// Code generated by mockery v2.53.3. DO NOT EDIT.

package translation

import mock "github.com/stretchr/testify/mock"

// MockCollector is an autogenerated mock type for the Collector type
type MockCollector struct {
	mock.Mock
}

type MockCollector_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCollector) EXPECT() *MockCollector_Expecter {
	return &MockCollector_Expecter{mock: &_m.Mock}
}

// CollectTranslationItemsJson provides a mock function with given fields: root
func (_m *MockCollector) CollectTranslationItemsJson(root interface{}) ([]TranslationItem, error) {
	ret := _m.Called(root)

	if len(ret) == 0 {
		panic("no return value specified for CollectTranslationItemsJson")
	}

	var r0 []TranslationItem
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) ([]TranslationItem, error)); ok {
		return rf(root)
	}
	if rf, ok := ret.Get(0).(func(interface{}) []TranslationItem); ok {
		r0 = rf(root)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]TranslationItem)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(root)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCollector_CollectTranslationItemsJson_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CollectTranslationItemsJson'
type MockCollector_CollectTranslationItemsJson_Call struct {
	*mock.Call
}

// CollectTranslationItemsJson is a helper method to define mock.On call
//   - root interface{}
func (_e *MockCollector_Expecter) CollectTranslationItemsJson(root interface{}) *MockCollector_CollectTranslationItemsJson_Call {
	return &MockCollector_CollectTranslationItemsJson_Call{Call: _e.mock.On("CollectTranslationItemsJson", root)}
}

func (_c *MockCollector_CollectTranslationItemsJson_Call) Run(run func(root interface{})) *MockCollector_CollectTranslationItemsJson_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockCollector_CollectTranslationItemsJson_Call) Return(_a0 []TranslationItem, _a1 error) *MockCollector_CollectTranslationItemsJson_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCollector_CollectTranslationItemsJson_Call) RunAndReturn(run func(interface{}) ([]TranslationItem, error)) *MockCollector_CollectTranslationItemsJson_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCollector creates a new instance of MockCollector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCollector(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCollector {
	mock := &MockCollector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
