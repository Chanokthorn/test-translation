// Code generated by mockery v2.53.3. DO NOT EDIT.

package traverser

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockTraverser is an autogenerated mock type for the Traverser type
type MockTraverser struct {
	mock.Mock
}

type MockTraverser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTraverser) EXPECT() *MockTraverser_Expecter {
	return &MockTraverser_Expecter{mock: &_m.Mock}
}

// Traverse provides a mock function with given fields: ctx, data
func (_m *MockTraverser) Traverse(ctx context.Context, data interface{}) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Traverse")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTraverser_Traverse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Traverse'
type MockTraverser_Traverse_Call struct {
	*mock.Call
}

// Traverse is a helper method to define mock.On call
//   - ctx context.Context
//   - data interface{}
func (_e *MockTraverser_Expecter) Traverse(ctx interface{}, data interface{}) *MockTraverser_Traverse_Call {
	return &MockTraverser_Traverse_Call{Call: _e.mock.On("Traverse", ctx, data)}
}

func (_c *MockTraverser_Traverse_Call) Run(run func(ctx context.Context, data interface{})) *MockTraverser_Traverse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *MockTraverser_Traverse_Call) Return(_a0 error) *MockTraverser_Traverse_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTraverser_Traverse_Call) RunAndReturn(run func(context.Context, interface{}) error) *MockTraverser_Traverse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTraverser creates a new instance of MockTraverser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTraverser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTraverser {
	mock := &MockTraverser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
